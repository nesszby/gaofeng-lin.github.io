<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-01-08T07:23:04.167Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/01/08/Linux%20Shell%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2022/01/08/Linux%20Shell%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</id>
    <published>2022-01-08T07:23:14.281Z</published>
    <updated>2022-01-08T07:23:04.167Z</updated>
    
    <content type="html"><![CDATA[<p>@[toc]</p><p><strong>git bash使用的是linux命令，创建文件夹用mkdir+文件夹名、创建文件用touch 或者 vim</strong></p><h1 id="1-实际命令分析"><a href="#1-实际命令分析" class="headerlink" title="1 实际命令分析"></a>1 实际命令分析</h1><h2 id="1-1-git-log-–follow-–pretty-format-H-文件名-xargs-I-sh-c-‘git-show-文件名-gt-文件名-’"><a href="#1-1-git-log-–follow-–pretty-format-H-文件名-xargs-I-sh-c-‘git-show-文件名-gt-文件名-’" class="headerlink" title="1.1 git log –follow –pretty=format:%H 文件名 | xargs -I{} sh -c ‘git show {}:文件名 &gt; 文件名.{}’"></a>1.1 git log –follow –pretty=format:%H 文件名 | xargs -I{} sh -c ‘git show {}:文件名 &gt; 文件名.{}’</h2><p>提取git中某个文件的所有版本并按顺序命名:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --follow --pretty=format:%H 文件名 | xargs -I&#123;&#125; sh -c &#x27;git show &#123;&#125;:文件名 &gt; 文件名.&#123;&#125;&#x27;</span><br></pre></td></tr></table></figure><p>简略解释版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git log --follow --pretty=format:%H </span><br><span class="line">//按照一定的格式输出 ，输出某个文件的历史提交哈希值</span><br><span class="line"></span><br><span class="line">| xargs -I&#123;&#125; </span><br><span class="line"></span><br><span class="line">//xargs 一般是和管道(I)一起使用</span><br><span class="line"> //-I&#123;&#125; //xargs 的一个选项 -I，使用 -I 指定一个替换字符串 &#123;&#125;，这个字符串在 xargs 扩展时会被替换掉；对应这里，前面输出的是哈希值，这里面&quot;&#123;&#125;&quot;代表的就是哈希值，后面的&quot;&#123;&#125;&quot;也是前面的哈希值。</span><br><span class="line"></span><br><span class="line">sh -c </span><br><span class="line">//暂时不清，下面有解释</span><br><span class="line"></span><br><span class="line">git show &#123;&#125;:文件名 &gt; 文件名.&#123;&#125; </span><br><span class="line"> //git show &#x27;哈希值&#x27;:文件名：输出这次提交，这个文件夹的内容， &quot;&gt;&quot; 将内容输出到 后面的文件中，并覆盖后面文件内容。</span><br></pre></td></tr></table></figure><p>详细解释版本：</p><blockquote><p>1.git log –follow –pretty=format:%H 文件名</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"> git log //查看git提交历史</span><br><span class="line"></span><br><span class="line">--follow //有没有follow会有差异，一个『浮于表面』，只认历史上与当前文件名匹配的提交记录，一个认准文件的『真身』，不管当前文件曾经披着什么的『皮』，始终追溯它的真身。**所以建议加上follow。（这里还不是很清楚）**</span><br><span class="line"></span><br><span class="line">--pretty=format:%H 文件名 //使用不同于默认格式的方式展示“某文件”提交历史,format后面跟占位符</span><br><span class="line"></span><br><span class="line">Table 1. git log --pretty=format 常用的选项</span><br><span class="line">选项说明</span><br><span class="line">%H</span><br><span class="line"></span><br><span class="line">提交的完整哈希值</span><br><span class="line"></span><br><span class="line">%h</span><br><span class="line"></span><br><span class="line">提交的简写哈希值</span><br><span class="line"></span><br><span class="line">%T</span><br><span class="line"></span><br><span class="line">树的完整哈希值</span><br><span class="line"></span><br><span class="line">%t</span><br><span class="line"></span><br><span class="line">树的简写哈希值</span><br><span class="line"></span><br><span class="line">%P</span><br><span class="line"></span><br><span class="line">父提交的完整哈希值</span><br><span class="line"></span><br><span class="line">%p</span><br><span class="line"></span><br><span class="line">父提交的简写哈希值</span><br><span class="line"></span><br><span class="line">%an</span><br><span class="line"></span><br><span class="line">作者名字</span><br><span class="line"></span><br><span class="line">%ae</span><br><span class="line"></span><br><span class="line">作者的电子邮件地址</span><br><span class="line"></span><br><span class="line">%ad</span><br><span class="line"></span><br><span class="line">作者修订日期（可以用 --date=选项 来定制格式）</span><br><span class="line"></span><br><span class="line">%ar</span><br><span class="line"></span><br><span class="line">作者修订日期，按多久以前的方式显示</span><br><span class="line"></span><br><span class="line">%cn</span><br><span class="line"></span><br><span class="line">提交者的名字</span><br><span class="line"></span><br><span class="line">%ce</span><br><span class="line"></span><br><span class="line">提交者的电子邮件地址</span><br><span class="line"></span><br><span class="line">%cd</span><br><span class="line"></span><br><span class="line">提交日期</span><br><span class="line"></span><br><span class="line">%cr</span><br><span class="line"></span><br><span class="line">提交日期（距今多长时间）</span><br><span class="line"></span><br><span class="line">%s</span><br><span class="line"></span><br><span class="line">提交说明</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>| xargs -I{} sh c</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|  //表示管道，上一条命令的输出，作为下一条命令参数，如 echo ‘yes’ | wc -l</span><br><span class="line"></span><br><span class="line">xargs -I //</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sh -c</span><br><span class="line"></span><br><span class="line">Linux使用 echo 并配合命令重定向是实现向文件中写入信息的快捷方式。</span><br><span class="line">【新建空文件】</span><br><span class="line">方式一 : $ touch test.sh</span><br><span class="line">方式二 : $ echo “” &gt; test.sh</span><br><span class="line">【写内容到文件】</span><br><span class="line">如 test.sh 文件中内容：</span><br><span class="line">$ echo “信息” &gt; test.sh</span><br><span class="line"></span><br><span class="line">但有时会出现权限不够的问题，这时就可以使用 sh -c</span><br><span class="line"></span><br><span class="line">利用 “sh -c” 命令，它可以让 bash 将一个字串作为完整的命令来执行，这样就可以将 sudo 的影响范围扩展到整条命令。具体用法如下：</span><br><span class="line">$ sudo sh -c ‘echo “第二条内容” &gt;&gt; test.sh’</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-2-git-branch-r-xargs-d-n1-grep-v-‘origin’-xargs-I-sh-c-‘mkdir-“C-Users-76585-Desktop-try-”-‘"><a href="#1-2-git-branch-r-xargs-d-n1-grep-v-‘origin’-xargs-I-sh-c-‘mkdir-“C-Users-76585-Desktop-try-”-‘" class="headerlink" title="1.2 git branch -r | xargs -d/ -n1 | grep -v ‘origin’ | xargs -I{} sh -c ‘mkdir “C:\Users\76585\Desktop\try{}” ‘"></a>1.2 git branch -r | xargs -d/ -n1 | grep -v ‘origin’ | xargs -I{} sh -c ‘mkdir “C:\Users\76585\Desktop\try{}” ‘</h2><blockquote><p>用途：给每一个远程分支建立单独的文件夹，文件名就是分支名</p></blockquote><p>分析：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.  git branch -r //显示远程分支。注意，本地分支可能只有一个，master这种。但远程分支可能有很多个。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2. | xargs -d/ -n1 // -d -n都是xargs的参数，详细可以去查文档。-d/  以&quot;/&quot;为分隔符；-n1，每行输出一个。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3. grep -v &#x27;origin&#x27; // 遇到origin就不显示（删除这个字符串）。</span><br></pre></td></tr></table></figure><p>冷知识：在Windows下运行sh文件，在当前路径下，<code>./</code>;<br>如果是非当前路径，<code>c/xx/xxx/1.sh  //绝对路径到sh文件就好，前面不用加./</code> </p><h1 id="2-代码分析"><a href="#2-代码分析" class="headerlink" title="2 代码分析"></a>2 代码分析</h1><h2 id="2-1-读取文件夹中的文件名，并存入列表"><a href="#2-1-读取文件夹中的文件名，并存入列表" class="headerlink" title="2.1 读取文件夹中的文件名，并存入列表"></a>2.1 读取文件夹中的文件名，并存入列表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#读取文件夹中的文件名，并存入列表</span><br><span class="line"></span><br><span class="line">i=0</span><br><span class="line">for dir in $(ls &#x27;C:\Users\76585\Desktop\cfdname1&#x27;)</span><br><span class="line">do</span><br><span class="line">    </span><br><span class="line">    # echo $dir &gt;&gt; arr[$i]</span><br><span class="line">    arr[$i]=$dir</span><br><span class="line">    i=$(($i+1))</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;$&#123;arr[@]&#125;&quot;</span><br></pre></td></tr></table></figure><p><strong>注意的点：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1.for 循环循环体只能卸载do done之间，之前把 i 写在了for 和 do之间报错</span><br><span class="line"></span><br><span class="line">2.变量初始化不要放在函数体，不然每次循环都清 0 了。</span><br><span class="line"></span><br><span class="line">3.变量自增加方法：</span><br><span class="line">a=\$(($a+1))</span><br><span class="line"></span><br><span class="line">a=$[$a+1]</span><br><span class="line"></span><br><span class="line">a=\`expr $a + 1`</span><br><span class="line"></span><br><span class="line">let a++</span><br><span class="line"></span><br><span class="line">let a+=1</span><br><span class="line"></span><br><span class="line">((a++))</span><br><span class="line"></span><br><span class="line">4.打印数组的方法：$&#123;my_array[*]&#125; 或者 $&#123;my_array[@]&#125;</span><br></pre></td></tr></table></figure><h1 id="3-变量"><a href="#3-变量" class="headerlink" title="3 变量"></a>3 变量</h1><h2 id="3-1-获取变量字符串长度"><a href="#3-1-获取变量字符串长度" class="headerlink" title="3.1 获取变量字符串长度"></a>3.1 获取变量字符串长度</h2><p>想要知道”<a href="http://www.baidu.com&quot;的变量net的长度十分简单,通过`$/">www.baidu.com&quot;的变量net的长度十分简单，通过`$</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;@[toc]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git bash使用的是linux命令，创建文件夹用mkdir+文件夹名、创建文件用touch 或者 vim&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-实际命令分析&quot;&gt;&lt;a href=&quot;#1-实际命令分析&quot; class=&quot;he</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/01/08/hello-world/"/>
    <id>http://example.com/2022/01/08/hello-world/</id>
    <published>2022-01-08T01:56:19.378Z</published>
    <updated>2022-01-08T01:56:19.378Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
